{
  "components": {
    "comp-data-ingestion": {
      "executorLabel": "exec-data-ingestion",
      "inputDefinitions": {
        "parameters": {
          "dataset_id": {
            "parameterType": "STRING"
          },
          "file_path": {
            "parameterType": "STRING"
          },
          "project_id": {
            "parameterType": "STRING"
          },
          "table_id": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "output_data": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-inference": {
      "executorLabel": "exec-inference",
      "inputDefinitions": {
        "artifacts": {
          "model": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "forecast_output": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-modelling": {
      "executorLabel": "exec-modelling",
      "inputDefinitions": {
        "artifacts": {
          "input_data": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "model_output": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    }
  },
  "deploymentSpec": {
    "executors": {
      "exec-data-ingestion": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "data_ingestion"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef data_ingestion(file_path: str, project_id: str, dataset_id: str, table_id: str, output_data: Output[Dataset]):\n    import pandas as pd\n    from premodeling.csv_to_bq import load_csv_to_bigquery\n    from premodeling.feature_engineering import extract_features\n\n    load_csv_to_bigquery(file_path, project_id, dataset_id, table_id)\n    df = extract_features(project_id, dataset_id, table_id)\n\n    df.to_csv(output_data.path, index=False)\n\n"
          ],
          "image": "python:3.10"
        }
      },
      "exec-inference": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "inference"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef inference(model: Input[Model], forecast_output: Output[Dataset]):\n    import pandas as pd\n    from inference.inference import predict\n\n    forecast = predict(model_path=model.path, project_id=\"theta-maker-446106-s4\", region=\"us-central\")\n\n    forecast.to_csv(forecast_output.path, index=False)\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-modelling": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "modelling"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef modelling(input_data: Input[Dataset], model_output: Output[Model]):\n    import pandas as pd\n    from modelling.train import train_model\n    from modelling.register_model import register_model\n\n    df = pd.read_csv(input_data.path)\n    train_model(df, gcs_bucket_name='kaggle-sale', gcs_model_path='kaggle-sales/models/prophet_model.pkl')\n    register_model(model_path, display_name=\"forecasting-model\", project_id=\"theta-maker-446106-s4\", region=\"us-central1-a\")\n\n    with open(model_output.path, \"w\") as f:\n        f.write(model_path)\n\n"
          ],
          "image": "python:3.9"
        }
      }
    }
  },
  "pipelineInfo": {
    "description": "try pipeline",
    "name": "kaggle-forecast"
  },
  "root": {
    "dag": {
      "tasks": {
        "data-ingestion": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-data-ingestion"
          },
          "inputs": {
            "parameters": {
              "dataset_id": {
                "componentInputParameter": "dataset_id"
              },
              "file_path": {
                "componentInputParameter": "file_path"
              },
              "project_id": {
                "componentInputParameter": "project_id"
              },
              "table_id": {
                "componentInputParameter": "table_id"
              }
            }
          },
          "taskInfo": {
            "name": "data-ingestion"
          }
        },
        "inference": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-inference"
          },
          "dependentTasks": [
            "modelling"
          ],
          "inputs": {
            "artifacts": {
              "model": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "model_output",
                  "producerTask": "modelling"
                }
              }
            }
          },
          "taskInfo": {
            "name": "inference"
          }
        },
        "modelling": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-modelling"
          },
          "dependentTasks": [
            "data-ingestion"
          ],
          "inputs": {
            "artifacts": {
              "input_data": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "output_data",
                  "producerTask": "data-ingestion"
                }
              }
            }
          },
          "taskInfo": {
            "name": "modelling"
          }
        }
      }
    },
    "inputDefinitions": {
      "parameters": {
        "dataset_id": {
          "parameterType": "STRING"
        },
        "file_path": {
          "parameterType": "STRING"
        },
        "project_id": {
          "parameterType": "STRING"
        },
        "table_id": {
          "parameterType": "STRING"
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.11.0"
}